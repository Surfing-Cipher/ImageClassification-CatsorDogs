# your_flask_app/.github/workflows/main.yml

name: CI/CD Pipeline for Flask Image Classifier

# Triggers the workflow on pushes to the 'main' branch
# and on pull requests targeting the 'main' branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push-docker-image:
    # Specifies the operating system for the runner
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      # This action checks out your repository code so the workflow can access it.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      # This action authenticates with Docker Hub using secrets stored in your GitHub repository.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # Use GitHub Secrets for security; these values are not exposed in logs.
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Step 3: Set up Docker Buildx
      # Buildx is a Docker component that provides enhanced build capabilities,
      # including better caching and multi-platform builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Build and Push Docker Image
      # This is the core step that builds your Docker image and pushes it to Docker Hub.
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          # The build context; '.' means the current directory (repository root).
          context: .
          # Specifies the path to your Dockerfile relative to the context.
          file: ./Dockerfile
          # Conditional push: only push the image to Docker Hub if the event is a 'push'
          # to the 'main' branch. For pull requests, it will build but not push.
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          # Defines the tags for your Docker image.
          # The image will be tagged with 'latest' and also with the commit SHA.
          tags: |
            # Tag the image with 'latest'
            ${{ secrets.DOCKER_USERNAME }}/cats_dogs_classifier:latest
            # Tag the image with the specific Git commit SHA for versioning
            ${{ secrets.DOCKER_USERNAME }}/cats_dogs_classifier:${{ github.sha }}
          # Configure caching using GitHub Actions' built-in cache for faster builds.
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 5: Verify Image (Optional - for debugging and confirmation)
      # This step just prints a message; you can expand it for more robust testing.
      - name: Verify Image (Optional - for debugging)
        run: echo "Docker image built and potentially pushed. Check Docker Hub for ${{ secrets.DOCKER_USERNAME }}/cats_dogs_classifier"
        # Example of adding a quick test (requires the container to be running and accessible):
        # - name: Test Docker Image (optional)
        #   if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Only test if pushed
        #   run: |
        #     docker run -d -p 5000:5000 --name my_app_test ${{ secrets.DOCKER_USERNAME }}/cats_dogs_classifier:latest
        #     sleep 10 # Give the app time to start
        #     curl -f http://localhost:5000/ # Check if Flask app is reachable
        #     docker rm -f my_app_test # Clean up the test container
